/**
 * Database operations for product management in the economy simulation.
 * Handles all CRUD operations for the products table in Supabase.
 */

import { supabase } from "../lib/supabase";

/**
 * Core product data structure matching the database schema.
 * Represents a sellable item in the festival economy simulation.
 *
 * @typedef {Object} Product
 * @property {number} id - Unique identifier (auto-generated by database).
 * @property {string} name - Human-readable product name.
 * @property {string} emoji - Unicode emoji for visual representation.
 * @property {number} price - Current price in euros (subject to dynamic pricing).
 * @property {number} stock - Current available quantity.
 * @property {number} initialstock - Original stock level (used for economy reset).
 */
export interface Product {
	id: number; // Changed from string to number to match database int8
	name: string;
	emoji: string;
	price: number;
	stock: number;
	initialstock: number;
}

/**
 * Retrieves all products from the database.
 *
 * @returns {Promise<Product[]>} Array of all products, empty array if error occurs.
 */
export async function getProducts(): Promise<Product[]> {
	console.log("üîç Attempting to fetch products from Supabase...");
	console.log("üîç Supabase URL:", import.meta.env.VITE_SUPABASE_URL);
	console.log(
		"üîç Supabase Key exists:",
		!!import.meta.env.VITE_SUPABASE_ANON_KEY
	);

	const { data, error } = await supabase.from("products").select("*");

	if (error) {
		console.error("‚ùå Error fetching products:", error);
		return [];
	}

	console.log("‚úÖ Successfully fetched products from database:", data);
	return data || [];
}

/**
 * Updates specific fields of a product in the database.
 *
 * @param {number} productId - The unique ID of the product to update.
 * @param {Partial<Product>} updates - Object containing fields to update.
 * @returns {Promise<boolean>} True if update successful, false otherwise.
 */
export async function updateProduct(
	productId: number, // Changed from string to number
	updates: Partial<Product>
): Promise<boolean> {
	const { error } = await supabase
		.from("products")
		.update(updates)
		.eq("id", productId);

	if (error) {
		console.error("Error updating product:", error);
		return false;
	}

	return true;
}

/**
 * Updates the price of a specific product.
 *
 * @param {number} productId - The unique ID of the product.
 * @param {number} newPrice - The new price in euros.
 * @returns {Promise<boolean>} True if update successful, false otherwise.
 */
export async function updateProductPrice(
	productId: number,
	newPrice: number
): Promise<boolean> {
	const { error } = await supabase
		.from("products")
		.update({ price: newPrice })
		.eq("id", productId);

	if (error) {
		console.error("Error updating product price:", error);
		return false;
	}

	return true;
}

/**
 * Updates the stock quantity of a specific product.
 *
 * @param {number} productId - The unique ID of the product.
 * @param {number} newStock - The new stock quantity.
 * @returns {Promise<boolean>} True if update successful, false otherwise.
 */
export async function updateProductStock(
	productId: number,
	newStock: number
): Promise<boolean> {
	const { error } = await supabase
		.from("products")
		.update({ stock: newStock })
		.eq("id", productId);

	if (error) {
		console.error("Error updating product stock:", error);
		return false;
	}

	return true;
}
