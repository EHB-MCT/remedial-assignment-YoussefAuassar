/**
 * Type definitions for the economy simulation admin system.
 */

import type { Product } from "../database/products";

/**
 * Represents a sales transaction record in the economy simulation.
 *
 * @typedef {Object} SalesRecord
 * @property {string} productId - Unique identifier for the product (string for UI compatibility).
 * @property {number} quantity - Number of units sold in this transaction.
 * @property {number} revenue - Total revenue generated from this sale.
 * @property {number} timestamp - Unix timestamp when the sale occurred (milliseconds).
 * @property {number} priceAtSale - The actual price per unit at the time of sale.
 */
export interface SalesRecord {
	productId: string;
	quantity: number;
	revenue: number;
	timestamp: number;
	priceAtSale: number;
}

/**
 * Database-compatible interface for inserting new sales records.
 * Matches the exact schema of the 'sales_history' table in Supabase.
 *
 * @typedef {Object} DBSalesRecord
 * @property {number} product_id - Foreign key reference to products.id.
 * @property {number} quantity - Number of units sold.
 * @property {number} revenue - Total revenue (quantity Ã— price_at_sale).
 * @property {number} price_at_sale - Price per unit at time of sale.
 * @property {string} [created_at] - ISO timestamp, automatically added by Supabase.
 */
export interface DBSalesRecord {
	product_id: number;
	quantity: number;
	revenue: number;
	price_at_sale: number;
	created_at?: string; // Supabase automatically adds this
}

/**
 * Statistical analysis data for a specific product.
 * Used for analytics, reporting, and leaderboard displays.
 *
 * @typedef {Object} ProductStats
 * @property {string} productId - Unique identifier for the product.
 * @property {number} totalSold - Total units sold across all transactions.
 * @property {number} totalRevenue - Cumulative revenue generated by this product.
 * @property {number} averagePrice - Average selling price (totalRevenue / totalSold).
 * @property {Array<{price: number, timestamp: number}>} priceHistory - Historical price changes over time.
 */
export interface ProductStats {
	productId: string;
	totalSold: number;
	totalRevenue: number;
	averagePrice: number;
	priceHistory: { price: number; timestamp: number }[];
}

/**
 * Comprehensive economic indicators for the entire marketplace.
 * These metrics provide insights into market health and performance.
 *
 * @typedef {Object} EconomicMetrics
 * @property {number} totalRevenue - Sum of all sales revenue across all products.
 * @property {number} totalTransactions - Count of all sales transactions.
 * @property {number} averageTransactionValue - Mean revenue per transaction.
 * @property {number} marketVolatility - Measure of price instability.
 * @property {number} priceInflation - Percentage change in average prices over time.
 */
export interface EconomicMetrics {
	totalRevenue: number;
	totalTransactions: number;
	averageTransactionValue: number;
	marketVolatility: number;
	priceInflation: number;
}

/**
 * Complete state structure for the admin dashboard.
 * Combines all data needed for administrative operations and analytics.
 *
 * @typedef {Object} AdminState
 * @property {Product[]} products - Array of all products in the system.
 * @property {SalesRecord[]} salesHistory - Complete transaction history.
 * @property {string} selectedProduct - Currently selected product ID for detailed analysis.
 * @property {EconomicMetrics} economicMetrics - Current economic indicators.
 */
export interface AdminState {
	products: Product[];
	salesHistory: SalesRecord[];
	selectedProduct: string;
	economicMetrics: EconomicMetrics;
}
